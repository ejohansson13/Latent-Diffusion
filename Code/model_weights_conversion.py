import torch

def load_from_model_weights(
    input_file: str,
    device: str
):
    pretrained_model = torch.load(input_file, map_location=device, weights_only=False)["state_dict"]
    converted = {}
    converted["diffusion"] = {}
    converted["autoencoder"] = {}
    converted["conditioner"] = {}

    # START OF DIFFUSION
    # Timestep Embedding
    converted["diffusion"]["timestep_embedding.linear_1.weight"] = pretrained_model["model.diffusion_model.time_embed.0.weight"]
    converted["diffusion"]["timestep_embedding.linear_1.bias"] = pretrained_model["model.diffusion_model.time_embed.0.bias"]
    converted["diffusion"]["timestep_embedding.linear_2.weight"] = pretrained_model["model.diffusion_model.time_embed.2.weight"]
    converted["diffusion"]["timestep_embedding.linear_2.bias"] = pretrained_model["model.diffusion_model.time_embed.2.bias"]
    # START OF UNET_Encoder
    # Encoder.conv_in
    converted["diffusion"]["unet.encoder.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.0.0.weight"]
    converted["diffusion"]["unet.encoder.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.0.0.bias"]
    # Encoder.initial_res1
    converted["diffusion"]["unet.encoder.initial_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.initial_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.initial_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.initial_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.initial_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.initial_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.initial_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.initial_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.initial_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.initial_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.0.out_layers.3.bias"]
    # Encoder.attn_1
    converted["diffusion"]["unet.encoder.attn_1.normalize_group.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.norm.weight"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_group.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.norm.bias"]
    converted["diffusion"]["unet.encoder.attn_1.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.proj_in.weight"]
    converted["diffusion"]["unet.encoder.attn_1.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.proj_in.bias"]
    converted["diffusion"]["unet.encoder.attn_1.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.encoder.attn_1.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.attn_1.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.attn_1.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.encoder.attn_1.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.encoder.attn_1.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.encoder.attn_1.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.attn_1.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.encoder.attn_1.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.encoder.attn_1.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.encoder.attn_1.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.encoder.attn_1.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.encoder.attn_1.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.encoder.attn_1.conv_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.1.1.proj_out.weight"]
    converted["diffusion"]["unet.encoder.attn_1.conv_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.1.1.proj_out.bias"]
    # Encoder.intial_res2
    converted["diffusion"]["unet.encoder.initial_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.initial_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.initial_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.initial_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.initial_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.initial_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.initial_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.initial_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.initial_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.initial_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.0.out_layers.3.bias"]
    # Encoder.attn_2
    converted["diffusion"]["unet.encoder.attn_2.normalize_group.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.norm.weight"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_group.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.norm.bias"]
    converted["diffusion"]["unet.encoder.attn_2.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.proj_in.weight"]
    converted["diffusion"]["unet.encoder.attn_2.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.proj_in.bias"]
    converted["diffusion"]["unet.encoder.attn_2.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.encoder.attn_2.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.attn_2.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.attn_2.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.encoder.attn_2.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.encoder.attn_2.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.encoder.attn_2.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.attn_2.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.encoder.attn_2.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.encoder.attn_2.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.encoder.attn_2.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.encoder.attn_2.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.encoder.attn_2.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.encoder.attn_2.conv_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.2.1.proj_out.weight"]
    converted["diffusion"]["unet.encoder.attn_2.conv_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.2.1.proj_out.bias"]
    # Encoder.down_conv_1
    converted["diffusion"]["unet.encoder.down_conv1.weight"] = pretrained_model["model.diffusion_model.input_blocks.3.0.op.weight"]
    converted["diffusion"]["unet.encoder.down_conv1.bias"] = pretrained_model["model.diffusion_model.input_blocks.3.0.op.bias"]
    # Encoder.down1_res1
    converted["diffusion"]["unet.encoder.down1_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down1_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down1_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.down1_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.down1_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.down1_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.down1_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down1_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down1_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.down1_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.0.out_layers.3.bias"]
    # mismatch # of channels -> residual_path weight
    converted["diffusion"]["unet.encoder.down1_res1.residual_path.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.0.skip_connection.weight"]
    converted["diffusion"]["unet.encoder.down1_res1.residual_path.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.0.skip_connection.bias"]
    # Encoder.down1_attn1
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_group.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.norm.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_group.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.norm.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.proj_in.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.proj_in.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.encoder.down1_attn1.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.encoder.down1_attn1.conv_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.4.1.proj_out.weight"]
    converted["diffusion"]["unet.encoder.down1_attn1.conv_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.4.1.proj_out.bias"]
    # Encoder.down1_res2
    converted["diffusion"]["unet.encoder.down1_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down1_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down1_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.down1_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.down1_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.down1_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.down1_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down1_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down1_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.down1_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.0.out_layers.3.bias"]
    # Encoder.down1_attn2
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_group.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.norm.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_group.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.norm.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.proj_in.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.proj_in.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.encoder.down1_attn2.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.encoder.down1_attn2.conv_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.5.1.proj_out.weight"]
    converted["diffusion"]["unet.encoder.down1_attn2.conv_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.5.1.proj_out.bias"]
    # Encoder.down_conv_2
    converted["diffusion"]["unet.encoder.down_conv2.weight"] = pretrained_model["model.diffusion_model.input_blocks.6.0.op.weight"]
    converted["diffusion"]["unet.encoder.down_conv2.bias"] = pretrained_model["model.diffusion_model.input_blocks.6.0.op.bias"]
    # Encoder.down2_res1
    converted["diffusion"]["unet.encoder.down2_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down2_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down2_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.down2_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.down2_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.down2_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.down2_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down2_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down2_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.down2_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.0.out_layers.3.bias"]
    # down2_res1.residual_path
    converted["diffusion"]["unet.encoder.down2_res1.residual_path.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.0.skip_connection.weight"]
    converted["diffusion"]["unet.encoder.down2_res1.residual_path.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.0.skip_connection.bias"]
    # Encoder.down2_attn1
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_group.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.norm.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_group.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.norm.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.proj_in.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.proj_in.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.encoder.down2_attn1.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.encoder.down2_attn1.conv_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.7.1.proj_out.weight"]
    converted["diffusion"]["unet.encoder.down2_attn1.conv_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.7.1.proj_out.bias"]
    # Encoder.down2_res2
    converted["diffusion"]["unet.encoder.down2_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down2_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down2_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.down2_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.down2_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.down2_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.down2_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down2_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down2_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.down2_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.0.out_layers.3.bias"]
    # Encoder.down2_attn2
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_group.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.norm.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_group.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.norm.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.conv_in.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.proj_in.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.conv_in.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.proj_in.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.encoder.down2_attn2.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.encoder.down2_attn2.conv_out.weight"] = pretrained_model["model.diffusion_model.input_blocks.8.1.proj_out.weight"]
    converted["diffusion"]["unet.encoder.down2_attn2.conv_out.bias"] = pretrained_model["model.diffusion_model.input_blocks.8.1.proj_out.bias"]
    # Encoder.down_conv_3
    converted["diffusion"]["unet.encoder.down_conv3.weight"] = pretrained_model["model.diffusion_model.input_blocks.9.0.op.weight"]
    converted["diffusion"]["unet.encoder.down_conv3.bias"] = pretrained_model["model.diffusion_model.input_blocks.9.0.op.bias"]
    # Encoder.down3_res1
    converted["diffusion"]["unet.encoder.down3_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.10.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down3_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.10.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down3_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.10.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.down3_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.10.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.down3_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.10.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.down3_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.10.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.down3_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.10.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down3_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.10.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down3_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.10.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.down3_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.10.0.out_layers.3.bias"]
    # Encoder.down3_res_2
    converted["diffusion"]["unet.encoder.down3_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.11.0.in_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down3_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.11.0.in_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down3_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.input_blocks.11.0.in_layers.2.weight"]
    converted["diffusion"]["unet.encoder.down3_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.input_blocks.11.0.in_layers.2.bias"]
    converted["diffusion"]["unet.encoder.down3_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.input_blocks.11.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.encoder.down3_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.input_blocks.11.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.encoder.down3_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.11.0.out_layers.0.weight"]
    converted["diffusion"]["unet.encoder.down3_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.11.0.out_layers.0.bias"]
    converted["diffusion"]["unet.encoder.down3_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.input_blocks.11.0.out_layers.3.weight"]
    converted["diffusion"]["unet.encoder.down3_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.input_blocks.11.0.out_layers.3.bias"]
    # END OF UNET_Encoder
    # START OF UNET_Bottleneck
    # Bottleneck.bottle_res1
    converted["diffusion"]["unet.bottleneck.bottle_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.middle_block.0.in_layers.0.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.middle_block.0.in_layers.0.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.middle_block.0.in_layers.2.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.middle_block.0.in_layers.2.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.middle_block.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.middle_block.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.middle_block.0.out_layers.0.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.middle_block.0.out_layers.0.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.middle_block.0.out_layers.3.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.middle_block.0.out_layers.3.bias"]
    # Bottleneck.bottle_attn
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_group.weight"] = pretrained_model["model.diffusion_model.middle_block.1.norm.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_group.bias"] = pretrained_model["model.diffusion_model.middle_block.1.norm.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.conv_in.weight"] = pretrained_model["model.diffusion_model.middle_block.1.proj_in.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.conv_in.bias"] = pretrained_model["model.diffusion_model.middle_block.1.proj_in.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.bottleneck.bottle_attn.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.conv_out.weight"] = pretrained_model["model.diffusion_model.middle_block.1.proj_out.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_attn.conv_out.bias"] = pretrained_model["model.diffusion_model.middle_block.1.proj_out.bias"]
    # Bottleneck.bottle_res2
    converted["diffusion"]["unet.bottleneck.bottle_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.middle_block.2.in_layers.0.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.middle_block.2.in_layers.0.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.middle_block.2.in_layers.2.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.middle_block.2.in_layers.2.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.middle_block.2.emb_layers.1.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.middle_block.2.emb_layers.1.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.middle_block.2.out_layers.0.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.middle_block.2.out_layers.0.bias"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.middle_block.2.out_layers.3.weight"]
    converted["diffusion"]["unet.bottleneck.bottle_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.middle_block.2.out_layers.3.bias"]
    # END OF UNET_Bottleneck
    # START OF UNET_Decoder
    # Decoder.initial_res1
    # every Decoder Resnet Block has residual_path
    converted["diffusion"]["unet.decoder.initial_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.0.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.initial_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.0.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.initial_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.0.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.initial_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.0.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.initial_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.0.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.initial_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.0.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.initial_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.0.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.initial_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.0.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.initial_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.0.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.initial_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.0.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.initial_res1.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.0.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.initial_res1.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.0.0.skip_connection.bias"]
    # Decoder.initial_res2
    converted["diffusion"]["unet.decoder.initial_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.1.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.initial_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.1.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.initial_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.1.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.initial_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.1.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.initial_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.1.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.initial_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.1.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.initial_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.1.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.initial_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.1.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.initial_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.1.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.initial_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.1.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.initial_res2.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.1.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.initial_res2.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.1.0.skip_connection.bias"]
    # Decoder.initial_res3
    converted["diffusion"]["unet.decoder.initial_res3.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.initial_res3.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.initial_res3.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.initial_res3.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.initial_res3.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.initial_res3.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.initial_res3.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.initial_res3.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.initial_res3.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.initial_res3.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.initial_res3.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.initial_res3.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.0.skip_connection.bias"]
    # Decoder.up_conv1
    converted["diffusion"]["unet.decoder.up_conv1.weight"] = pretrained_model["model.diffusion_model.output_blocks.2.1.conv.weight"]
    converted["diffusion"]["unet.decoder.up_conv1.bias"] = pretrained_model["model.diffusion_model.output_blocks.2.1.conv.bias"]
    # Decoder.up1_res1
    converted["diffusion"]["unet.decoder.up1_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up1_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up1_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up1_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up1_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up1_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up1_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up1_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up1_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up1_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up1_res1.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up1_res1.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.0.skip_connection.bias"]
    # Decoder.up1_attn1
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up1_attn1.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up1_attn1.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.3.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up1_attn1.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.3.1.proj_out.bias"]
    # Decoder.up1_res2
    converted["diffusion"]["unet.decoder.up1_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up1_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up1_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up1_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up1_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up1_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up1_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up1_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up1_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up1_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up1_res2.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up1_res2.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.0.skip_connection.bias"]
    # Decoder.up1_attn2
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up1_attn2.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up1_attn2.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.4.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up1_attn2.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.4.1.proj_out.bias"]
    # Decoder.up1_res3
    converted["diffusion"]["unet.decoder.up1_res3.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up1_res3.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up1_res3.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up1_res3.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up1_res3.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up1_res3.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up1_res3.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up1_res3.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up1_res3.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up1_res3.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up1_res3.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up1_res3.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.0.skip_connection.bias"]
    # Decoder.up1_attn3
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up1_attn3.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up1_attn3.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up1_attn3.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.1.proj_out.bias"]
    # Decoder.up_conv2
    converted["diffusion"]["unet.decoder.up_conv2.weight"] = pretrained_model["model.diffusion_model.output_blocks.5.2.conv.weight"]
    converted["diffusion"]["unet.decoder.up_conv2.bias"] = pretrained_model["model.diffusion_model.output_blocks.5.2.conv.bias"]
    # Decoder.up2_res1
    converted["diffusion"]["unet.decoder.up2_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up2_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up2_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up2_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up2_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up2_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up2_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up2_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up2_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up2_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up2_res1.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up2_res1.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.0.skip_connection.bias"]
    # Decoder.up2_attn1
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up2_attn1.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up2_attn1.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.6.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up2_attn1.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.6.1.proj_out.bias"]
    # Decoder.up2_res2
    converted["diffusion"]["unet.decoder.up2_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up2_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up2_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up2_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up2_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up2_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up2_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up2_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up2_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up2_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up2_res2.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up2_res2.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.0.skip_connection.bias"]
    # Decoder.up2_attn2
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up2_attn2.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up2_attn2.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.7.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up2_attn2.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.7.1.proj_out.bias"]
    # Decoder.up2_res3
    converted["diffusion"]["unet.decoder.up2_res3.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up2_res3.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up2_res3.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up2_res3.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up2_res3.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up2_res3.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up2_res3.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up2_res3.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up2_res3.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up2_res3.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up2_res3.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up2_res3.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.0.skip_connection.bias"]
    # Decoder.up2_attn3
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up2_attn3.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up2_attn3.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up2_attn3.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.1.proj_out.bias"]
    # Decoder.up_conv3
    converted["diffusion"]["unet.decoder.up_conv3.weight"] = pretrained_model["model.diffusion_model.output_blocks.8.2.conv.weight"]
    converted["diffusion"]["unet.decoder.up_conv3.bias"] = pretrained_model["model.diffusion_model.output_blocks.8.2.conv.bias"]
    # Decoder.up3_res1
    converted["diffusion"]["unet.decoder.up3_res1.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up3_res1.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up3_res1.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up3_res1.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up3_res1.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up3_res1.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up3_res1.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up3_res1.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up3_res1.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up3_res1.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up3_res1.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up3_res1.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.0.skip_connection.bias"]
    # Decoder.up3_attn1
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up3_attn1.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up3_attn1.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.9.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up3_attn1.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.9.1.proj_out.bias"]
    # Decoder.up3_res2
    converted["diffusion"]["unet.decoder.up3_res2.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up3_res2.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up3_res2.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up3_res2.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up3_res2.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up3_res2.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up3_res2.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up3_res2.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up3_res2.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up3_res2.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up3_res2.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up3_res2.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.0.skip_connection.bias"]
    # Decoder.up3_attn2
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up3_attn2.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up3_attn2.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.10.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up3_attn2.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.10.1.proj_out.bias"]
    # Decoder.up3_res3
    converted["diffusion"]["unet.decoder.up3_res3.normalize_group_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.0.in_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up3_res3.normalize_group_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.0.in_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up3_res3.conv_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.0.in_layers.2.weight"]
    converted["diffusion"]["unet.decoder.up3_res3.conv_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.0.in_layers.2.bias"]
    converted["diffusion"]["unet.decoder.up3_res3.time_linear.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.0.emb_layers.1.weight"]
    converted["diffusion"]["unet.decoder.up3_res3.time_linear.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.0.emb_layers.1.bias"]
    converted["diffusion"]["unet.decoder.up3_res3.normalize_group_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.0.out_layers.0.weight"]
    converted["diffusion"]["unet.decoder.up3_res3.normalize_group_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.0.out_layers.0.bias"]
    converted["diffusion"]["unet.decoder.up3_res3.conv_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.0.out_layers.3.weight"]
    converted["diffusion"]["unet.decoder.up3_res3.conv_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.0.out_layers.3.bias"]
    converted["diffusion"]["unet.decoder.up3_res3.residual_path.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.0.skip_connection.weight"]
    converted["diffusion"]["unet.decoder.up3_res3.residual_path.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.0.skip_connection.bias"]
    # Decoder.up3_attn3
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_group.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.norm.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_group.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.norm.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.conv_in.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.proj_in.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.conv_in.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.proj_in.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.attn.proj_in.weight"] = torch.cat((pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_q.weight"], pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_k.weight"], pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_v.weight"]), 0)
    converted["diffusion"]["unet.decoder.up3_attn3.attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.cross_attn.query_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_q.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.cross_attn.key_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_k.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.cross_attn.value_proj.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_v.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.cross_attn.proj_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.cross_attn.proj_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_layer_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_layer_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_layer_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_layer_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_layer_3.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.normalize_layer_3.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.geglu_nonlinearity_1.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.geglu_nonlinearity_1.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.geglu_nonlinearity_2.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.geglu_nonlinearity_2.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.bias"]
    converted["diffusion"]["unet.decoder.up3_attn3.conv_out.weight"] = pretrained_model["model.diffusion_model.output_blocks.11.1.proj_out.weight"]
    converted["diffusion"]["unet.decoder.up3_attn3.conv_out.bias"] = pretrained_model["model.diffusion_model.output_blocks.11.1.proj_out.bias"]
    # Decoder.normalize
    converted["diffusion"]["unet.decoder.normalize.weight"] = pretrained_model["model.diffusion_model.out.0.weight"]
    converted["diffusion"]["unet.decoder.normalize.bias"] = pretrained_model["model.diffusion_model.out.0.bias"]
    converted["diffusion"]["unet.decoder.conv_out.weight"] = pretrained_model["model.diffusion_model.out.2.weight"]
    converted["diffusion"]["unet.decoder.conv_out.bias"] = pretrained_model["model.diffusion_model.out.2.bias"]
    # End of UNET_decoder
    # END OF UNET

    # START OF VAE
    # START OF VAE_Encoder
    converted["autoencoder"]["encoder.conv_in.weight"] = pretrained_model["first_stage_model.encoder.conv_in.weight"]
    converted["autoencoder"]["encoder.conv_in.bias"] = pretrained_model["first_stage_model.encoder.conv_in.bias"]
    # Encoder.initial_res1
    converted["autoencoder"]["encoder.initial_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.0.norm1.weight"]
    converted["autoencoder"]["encoder.initial_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.0.norm1.bias"]
    converted["autoencoder"]["encoder.initial_res1.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.0.conv1.weight"]
    converted["autoencoder"]["encoder.initial_res1.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.0.conv1.bias"]
    converted["autoencoder"]["encoder.initial_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.0.norm2.weight"]
    converted["autoencoder"]["encoder.initial_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.0.norm2.bias"]
    converted["autoencoder"]["encoder.initial_res1.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.0.conv2.weight"]
    converted["autoencoder"]["encoder.initial_res1.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.0.conv2.bias"]
    # Encoder.initial_res2
    converted["autoencoder"]["encoder.initial_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.1.norm1.weight"]
    converted["autoencoder"]["encoder.initial_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.1.norm1.bias"]
    converted["autoencoder"]["encoder.initial_res2.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.1.conv1.weight"]
    converted["autoencoder"]["encoder.initial_res2.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.1.conv1.bias"]
    converted["autoencoder"]["encoder.initial_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.1.norm2.weight"]
    converted["autoencoder"]["encoder.initial_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.1.norm2.bias"]
    converted["autoencoder"]["encoder.initial_res2.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.0.block.1.conv2.weight"]
    converted["autoencoder"]["encoder.initial_res2.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.0.block.1.conv2.bias"]
    # Encoder.down_conv1
    converted["autoencoder"]["encoder.down_conv1.weight"] = pretrained_model["first_stage_model.encoder.down.0.downsample.conv.weight"]
    converted["autoencoder"]["encoder.down_conv1.bias"] = pretrained_model["first_stage_model.encoder.down.0.downsample.conv.bias"]
    # Encoder.down1_res1
    converted["autoencoder"]["encoder.down1_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.0.norm1.weight"]
    converted["autoencoder"]["encoder.down1_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.0.norm1.bias"]
    converted["autoencoder"]["encoder.down1_res1.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.0.conv1.weight"]
    converted["autoencoder"]["encoder.down1_res1.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.0.conv1.bias"]
    converted["autoencoder"]["encoder.down1_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.0.norm2.weight"]
    converted["autoencoder"]["encoder.down1_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.0.norm2.bias"]
    converted["autoencoder"]["encoder.down1_res1.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.0.conv2.weight"]
    converted["autoencoder"]["encoder.down1_res1.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.0.conv2.bias"]
    # down1_res1.residual_path
    converted["autoencoder"]["encoder.down1_res1.residual_path.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.0.nin_shortcut.weight"]
    converted["autoencoder"]["encoder.down1_res1.residual_path.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.0.nin_shortcut.bias"]
    # Encoder.down1_res2
    converted["autoencoder"]["encoder.down1_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.1.norm1.weight"]
    converted["autoencoder"]["encoder.down1_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.1.norm1.bias"]
    converted["autoencoder"]["encoder.down1_res2.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.1.conv1.weight"]
    converted["autoencoder"]["encoder.down1_res2.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.1.conv1.bias"]
    converted["autoencoder"]["encoder.down1_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.1.norm2.weight"]
    converted["autoencoder"]["encoder.down1_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.1.norm2.bias"]
    converted["autoencoder"]["encoder.down1_res2.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.1.block.1.conv2.weight"]
    converted["autoencoder"]["encoder.down1_res2.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.1.block.1.conv2.bias"]
    # Encoder.down_conv2
    converted["autoencoder"]["encoder.down_conv2.weight"] = pretrained_model["first_stage_model.encoder.down.1.downsample.conv.weight"]
    converted["autoencoder"]["encoder.down_conv2.bias"] = pretrained_model["first_stage_model.encoder.down.1.downsample.conv.bias"]
    # Encoder.down2_res1
    converted["autoencoder"]["encoder.down2_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.0.norm1.weight"]
    converted["autoencoder"]["encoder.down2_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.0.norm1.bias"]
    converted["autoencoder"]["encoder.down2_res1.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.0.conv1.weight"]
    converted["autoencoder"]["encoder.down2_res1.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.0.conv1.bias"]
    converted["autoencoder"]["encoder.down2_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.0.norm2.weight"]
    converted["autoencoder"]["encoder.down2_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.0.norm2.bias"]
    converted["autoencoder"]["encoder.down2_res1.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.0.conv2.weight"]
    converted["autoencoder"]["encoder.down2_res1.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.0.conv2.bias"]
    # down2_res1.residual_path
    converted["autoencoder"]["encoder.down2_res1.residual_path.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.0.nin_shortcut.weight"]
    converted["autoencoder"]["encoder.down2_res1.residual_path.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.0.nin_shortcut.bias"]
    # Encoder.down2_res2
    converted["autoencoder"]["encoder.down2_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.1.norm1.weight"]
    converted["autoencoder"]["encoder.down2_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.1.norm1.bias"]
    converted["autoencoder"]["encoder.down2_res2.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.1.conv1.weight"]
    converted["autoencoder"]["encoder.down2_res2.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.1.conv1.bias"]
    converted["autoencoder"]["encoder.down2_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.1.norm2.weight"]
    converted["autoencoder"]["encoder.down2_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.1.norm2.bias"]
    converted["autoencoder"]["encoder.down2_res2.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.2.block.1.conv2.weight"]
    converted["autoencoder"]["encoder.down2_res2.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.2.block.1.conv2.bias"]
    # Encoder.down_conv3
    converted["autoencoder"]["encoder.down_conv3.weight"] = pretrained_model["first_stage_model.encoder.down.2.downsample.conv.weight"]
    converted["autoencoder"]["encoder.down_conv3.bias"] = pretrained_model["first_stage_model.encoder.down.2.downsample.conv.bias"]
    # Encoder.down3_res1
    converted["autoencoder"]["encoder.down3_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.0.norm1.weight"]
    converted["autoencoder"]["encoder.down3_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.0.norm1.bias"]
    converted["autoencoder"]["encoder.down3_res1.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.0.conv1.weight"]
    converted["autoencoder"]["encoder.down3_res1.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.0.conv1.bias"]
    converted["autoencoder"]["encoder.down3_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.0.norm2.weight"]
    converted["autoencoder"]["encoder.down3_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.0.norm2.bias"]
    converted["autoencoder"]["encoder.down3_res1.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.0.conv2.weight"]
    converted["autoencoder"]["encoder.down3_res1.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.0.conv2.bias"]
    # Encoder.down3_res2
    converted["autoencoder"]["encoder.down3_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.1.norm1.weight"]
    converted["autoencoder"]["encoder.down3_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.1.norm1.bias"]
    converted["autoencoder"]["encoder.down3_res2.conv_1.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.1.conv1.weight"]
    converted["autoencoder"]["encoder.down3_res2.conv_1.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.1.conv1.bias"]
    converted["autoencoder"]["encoder.down3_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.1.norm2.weight"]
    converted["autoencoder"]["encoder.down3_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.1.norm2.bias"]
    converted["autoencoder"]["encoder.down3_res2.conv_2.weight"] = pretrained_model["first_stage_model.encoder.down.3.block.1.conv2.weight"]
    converted["autoencoder"]["encoder.down3_res2.conv_2.bias"] = pretrained_model["first_stage_model.encoder.down.3.block.1.conv2.bias"]
    # Encoder.middle_res1
    converted["autoencoder"]["encoder.middle_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.mid.block_1.norm1.weight"]
    converted["autoencoder"]["encoder.middle_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.mid.block_1.norm1.bias"]
    converted["autoencoder"]["encoder.middle_res1.conv_1.weight"] = pretrained_model["first_stage_model.encoder.mid.block_1.conv1.weight"]
    converted["autoencoder"]["encoder.middle_res1.conv_1.bias"] = pretrained_model["first_stage_model.encoder.mid.block_1.conv1.bias"]
    converted["autoencoder"]["encoder.middle_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.mid.block_1.norm2.weight"]
    converted["autoencoder"]["encoder.middle_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.mid.block_1.norm2.bias"]
    converted["autoencoder"]["encoder.middle_res1.conv_2.weight"] = pretrained_model["first_stage_model.encoder.mid.block_1.conv2.weight"]
    converted["autoencoder"]["encoder.middle_res1.conv_2.bias"] = pretrained_model["first_stage_model.encoder.mid.block_1.conv2.bias"]
    # Encoder.attn
    converted["autoencoder"]["encoder.attn.normalize_group.weight"] = pretrained_model["first_stage_model.encoder.mid.attn_1.norm.weight"]
    converted["autoencoder"]["encoder.attn.normalize_group.bias"] = pretrained_model["first_stage_model.encoder.mid.attn_1.norm.bias"]
    converted["autoencoder"]["encoder.attn.attention.proj_in.weight"] = torch.cat((pretrained_model["first_stage_model.encoder.mid.attn_1.q.weight"], pretrained_model["first_stage_model.encoder.mid.attn_1.k.weight"], pretrained_model["first_stage_model.encoder.mid.attn_1.v.weight"]), 0).reshape((1536, 512))
    converted["autoencoder"]["encoder.attn.attention.proj_in.bias"] = torch.cat((pretrained_model["first_stage_model.encoder.mid.attn_1.q.bias"], pretrained_model["first_stage_model.encoder.mid.attn_1.k.bias"], pretrained_model["first_stage_model.encoder.mid.attn_1.v.bias"]), 0)
    converted["autoencoder"]["encoder.attn.attention.proj_out.weight"] = pretrained_model["first_stage_model.encoder.mid.attn_1.proj_out.weight"].reshape((512, 512))
    converted["autoencoder"]["encoder.attn.attention.proj_out.bias"] = pretrained_model["first_stage_model.encoder.mid.attn_1.proj_out.bias"]
    # Encoder.middle_res2
    converted["autoencoder"]["encoder.middle_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.encoder.mid.block_2.norm1.weight"]
    converted["autoencoder"]["encoder.middle_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.encoder.mid.block_2.norm1.bias"]
    converted["autoencoder"]["encoder.middle_res2.conv_1.weight"] = pretrained_model["first_stage_model.encoder.mid.block_2.conv1.weight"]
    converted["autoencoder"]["encoder.middle_res2.conv_1.bias"] = pretrained_model["first_stage_model.encoder.mid.block_2.conv1.bias"]
    converted["autoencoder"]["encoder.middle_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.encoder.mid.block_2.norm2.weight"]
    converted["autoencoder"]["encoder.middle_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.encoder.mid.block_2.norm2.bias"]
    converted["autoencoder"]["encoder.middle_res2.conv_2.weight"] = pretrained_model["first_stage_model.encoder.mid.block_2.conv2.weight"]
    converted["autoencoder"]["encoder.middle_res2.conv_2.bias"] = pretrained_model["first_stage_model.encoder.mid.block_2.conv2.bias"]
    # Encoder.normalize
    converted["autoencoder"]["encoder.normalize.weight"] = pretrained_model["first_stage_model.encoder.norm_out.weight"]
    converted["autoencoder"]["encoder.normalize.bias"] = pretrained_model["first_stage_model.encoder.norm_out.bias"]
    # Encoder.conv_final
    converted["autoencoder"]["encoder.conv_final.weight"] = pretrained_model["first_stage_model.encoder.conv_out.weight"]
    converted["autoencoder"]["encoder.conv_final.bias"] = pretrained_model["first_stage_model.encoder.conv_out.bias"]
    # END OF VAE_Encoder

    # quantum_conv
    converted["autoencoder"]["quantum_conv.weight"] = pretrained_model["first_stage_model.quant_conv.weight"]
    converted["autoencoder"]["quantum_conv.bias"] = pretrained_model["first_stage_model.quant_conv.bias"]
    # post_quantum_conv
    converted["autoencoder"]["post_quantum_conv.weight"] = pretrained_model["first_stage_model.post_quant_conv.weight"]
    converted["autoencoder"]["post_quantum_conv.bias"] = pretrained_model["first_stage_model.post_quant_conv.bias"]

    # START OF VAE_Decoder
    # Decoder.conv_in
    converted["autoencoder"]["decoder.conv_in.weight"] = pretrained_model["first_stage_model.decoder.conv_in.weight"]
    converted["autoencoder"]["decoder.conv_in.bias"] = pretrained_model["first_stage_model.decoder.conv_in.bias"]
    # Decoder.middle_res1
    converted["autoencoder"]["decoder.middle_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.mid.block_1.norm1.weight"]
    converted["autoencoder"]["decoder.middle_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.mid.block_1.norm1.bias"]
    converted["autoencoder"]["decoder.middle_res1.conv_1.weight"] = pretrained_model["first_stage_model.decoder.mid.block_1.conv1.weight"]
    converted["autoencoder"]["decoder.middle_res1.conv_1.bias"] = pretrained_model["first_stage_model.decoder.mid.block_1.conv1.bias"]
    converted["autoencoder"]["decoder.middle_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.mid.block_1.norm2.weight"]
    converted["autoencoder"]["decoder.middle_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.mid.block_1.norm2.bias"]
    converted["autoencoder"]["decoder.middle_res1.conv_2.weight"] = pretrained_model["first_stage_model.decoder.mid.block_1.conv2.weight"]
    converted["autoencoder"]["decoder.middle_res1.conv_2.bias"] = pretrained_model["first_stage_model.decoder.mid.block_1.conv2.bias"]
    # Decoder.attn
    converted["autoencoder"]["decoder.attn.normalize_group.weight"] = pretrained_model["first_stage_model.decoder.mid.attn_1.norm.weight"]
    converted["autoencoder"]["decoder.attn.normalize_group.bias"] = pretrained_model["first_stage_model.decoder.mid.attn_1.norm.bias"]
    converted["autoencoder"]["decoder.attn.attention.proj_in.weight"] = torch.cat((pretrained_model["first_stage_model.decoder.mid.attn_1.q.weight"], pretrained_model["first_stage_model.decoder.mid.attn_1.k.weight"], pretrained_model["first_stage_model.decoder.mid.attn_1.v.weight"]), 0).reshape((1536, 512))
    converted["autoencoder"]["decoder.attn.attention.proj_in.bias"] = torch.cat((pretrained_model["first_stage_model.decoder.mid.attn_1.q.bias"], pretrained_model["first_stage_model.decoder.mid.attn_1.k.bias"], pretrained_model["first_stage_model.decoder.mid.attn_1.v.bias"]), 0)
    converted["autoencoder"]["decoder.attn.attention.proj_out.weight"] = pretrained_model["first_stage_model.decoder.mid.attn_1.proj_out.weight"].reshape((512, 512))
    converted["autoencoder"]["decoder.attn.attention.proj_out.bias"] = pretrained_model["first_stage_model.decoder.mid.attn_1.proj_out.bias"]
    # Decoder.middle_res2
    converted["autoencoder"]["decoder.middle_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.mid.block_2.norm1.weight"]
    converted["autoencoder"]["decoder.middle_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.mid.block_2.norm1.bias"]
    converted["autoencoder"]["decoder.middle_res2.conv_1.weight"] = pretrained_model["first_stage_model.decoder.mid.block_2.conv1.weight"]
    converted["autoencoder"]["decoder.middle_res2.conv_1.bias"] = pretrained_model["first_stage_model.decoder.mid.block_2.conv1.bias"]
    converted["autoencoder"]["decoder.middle_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.mid.block_2.norm2.weight"]
    converted["autoencoder"]["decoder.middle_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.mid.block_2.norm2.bias"]
    converted["autoencoder"]["decoder.middle_res2.conv_2.weight"] = pretrained_model["first_stage_model.decoder.mid.block_2.conv2.weight"]
    converted["autoencoder"]["decoder.middle_res2.conv_2.bias"] = pretrained_model["first_stage_model.decoder.mid.block_2.conv2.bias"]
    # Decoder.initial_res1 -> CompVis iterate in reverse for decoder blocks
    # ordering of blocks might seem incorrect, but that"s due to the reverse loop in their implementation
    converted["autoencoder"]["decoder.initial_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.0.norm1.weight"]
    converted["autoencoder"]["decoder.initial_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.0.norm1.bias"]
    converted["autoencoder"]["decoder.initial_res1.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.0.conv1.weight"]
    converted["autoencoder"]["decoder.initial_res1.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.0.conv1.bias"]
    converted["autoencoder"]["decoder.initial_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.0.norm2.weight"]
    converted["autoencoder"]["decoder.initial_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.0.norm2.bias"]
    converted["autoencoder"]["decoder.initial_res1.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.0.conv2.weight"]
    converted["autoencoder"]["decoder.initial_res1.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.0.conv2.bias"]
    # Decoder.initial_res2
    converted["autoencoder"]["decoder.initial_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.1.norm1.weight"]
    converted["autoencoder"]["decoder.initial_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.1.norm1.bias"]
    converted["autoencoder"]["decoder.initial_res2.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.1.conv1.weight"]
    converted["autoencoder"]["decoder.initial_res2.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.1.conv1.bias"]
    converted["autoencoder"]["decoder.initial_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.1.norm2.weight"]
    converted["autoencoder"]["decoder.initial_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.1.norm2.bias"]
    converted["autoencoder"]["decoder.initial_res2.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.1.conv2.weight"]
    converted["autoencoder"]["decoder.initial_res2.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.1.conv2.bias"]
    # Decoder.initial_res3
    converted["autoencoder"]["decoder.initial_res3.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.2.norm1.weight"]
    converted["autoencoder"]["decoder.initial_res3.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.2.norm1.bias"]
    converted["autoencoder"]["decoder.initial_res3.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.2.conv1.weight"]
    converted["autoencoder"]["decoder.initial_res3.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.2.conv1.bias"]
    converted["autoencoder"]["decoder.initial_res3.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.2.norm2.weight"]
    converted["autoencoder"]["decoder.initial_res3.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.2.norm2.bias"]
    converted["autoencoder"]["decoder.initial_res3.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.3.block.2.conv2.weight"]
    converted["autoencoder"]["decoder.initial_res3.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.3.block.2.conv2.bias"]
    # Decoder.up_conv1 -> no parameters for nn.Upsample
    converted["autoencoder"]["decoder.up_conv1.weight"] = pretrained_model["first_stage_model.decoder.up.3.upsample.conv.weight"]
    converted["autoencoder"]["decoder.up_conv1.bias"] = pretrained_model["first_stage_model.decoder.up.3.upsample.conv.bias"]
    # Decoder.up1_res1
    converted["autoencoder"]["decoder.up1_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.0.norm1.weight"]
    converted["autoencoder"]["decoder.up1_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.0.norm1.bias"]
    converted["autoencoder"]["decoder.up1_res1.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.0.conv1.weight"]
    converted["autoencoder"]["decoder.up1_res1.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.0.conv1.bias"]
    converted["autoencoder"]["decoder.up1_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.0.norm2.weight"]
    converted["autoencoder"]["decoder.up1_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.0.norm2.bias"]
    converted["autoencoder"]["decoder.up1_res1.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.0.conv2.weight"]
    converted["autoencoder"]["decoder.up1_res1.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.0.conv2.bias"]
    # Decoder.up1_res2
    converted["autoencoder"]["decoder.up1_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.1.norm1.weight"]
    converted["autoencoder"]["decoder.up1_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.1.norm1.bias"]
    converted["autoencoder"]["decoder.up1_res2.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.1.conv1.weight"]
    converted["autoencoder"]["decoder.up1_res2.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.1.conv1.bias"]
    converted["autoencoder"]["decoder.up1_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.1.norm2.weight"]
    converted["autoencoder"]["decoder.up1_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.1.norm2.bias"]
    converted["autoencoder"]["decoder.up1_res2.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.1.conv2.weight"]
    converted["autoencoder"]["decoder.up1_res2.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.1.conv2.bias"]
    # Decoder.up1_res3
    converted["autoencoder"]["decoder.up1_res3.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.2.norm1.weight"]
    converted["autoencoder"]["decoder.up1_res3.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.2.norm1.bias"]
    converted["autoencoder"]["decoder.up1_res3.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.2.conv1.weight"]
    converted["autoencoder"]["decoder.up1_res3.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.2.conv1.bias"]
    converted["autoencoder"]["decoder.up1_res3.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.2.norm2.weight"]
    converted["autoencoder"]["decoder.up1_res3.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.2.norm2.bias"]
    converted["autoencoder"]["decoder.up1_res3.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.2.block.2.conv2.weight"]
    converted["autoencoder"]["decoder.up1_res3.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.2.block.2.conv2.bias"]
    # Decoder.up_conv2
    converted["autoencoder"]["decoder.up_conv2.weight"] = pretrained_model["first_stage_model.decoder.up.2.upsample.conv.weight"]
    converted["autoencoder"]["decoder.up_conv2.bias"] = pretrained_model["first_stage_model.decoder.up.2.upsample.conv.bias"]
    # Decoder.up2_res1
    converted["autoencoder"]["decoder.up2_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.0.norm1.weight"]
    converted["autoencoder"]["decoder.up2_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.0.norm1.bias"]
    converted["autoencoder"]["decoder.up2_res1.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.0.conv1.weight"]
    converted["autoencoder"]["decoder.up2_res1.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.0.conv1.bias"]
    converted["autoencoder"]["decoder.up2_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.0.norm2.weight"]
    converted["autoencoder"]["decoder.up2_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.0.norm2.bias"]
    converted["autoencoder"]["decoder.up2_res1.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.0.conv2.weight"]
    converted["autoencoder"]["decoder.up2_res1.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.0.conv2.bias"]
    # up2_res1.residual_path
    converted["autoencoder"]["decoder.up2_res1.residual_path.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.0.nin_shortcut.weight"]
    converted["autoencoder"]["decoder.up2_res1.residual_path.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.0.nin_shortcut.bias"]
    # Decoder.up2_res2
    converted["autoencoder"]["decoder.up2_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.1.norm1.weight"]
    converted["autoencoder"]["decoder.up2_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.1.norm1.bias"]
    converted["autoencoder"]["decoder.up2_res2.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.1.conv1.weight"]
    converted["autoencoder"]["decoder.up2_res2.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.1.conv1.bias"]
    converted["autoencoder"]["decoder.up2_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.1.norm2.weight"]
    converted["autoencoder"]["decoder.up2_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.1.norm2.bias"]
    converted["autoencoder"]["decoder.up2_res2.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.1.conv2.weight"]
    converted["autoencoder"]["decoder.up2_res2.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.1.conv2.bias"]
    # Decoder.up2_res3
    converted["autoencoder"]["decoder.up2_res3.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.2.norm1.weight"]
    converted["autoencoder"]["decoder.up2_res3.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.2.norm1.bias"]
    converted["autoencoder"]["decoder.up2_res3.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.2.conv1.weight"]
    converted["autoencoder"]["decoder.up2_res3.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.2.conv1.bias"]
    converted["autoencoder"]["decoder.up2_res3.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.2.norm2.weight"]
    converted["autoencoder"]["decoder.up2_res3.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.2.norm2.bias"]
    converted["autoencoder"]["decoder.up2_res3.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.1.block.2.conv2.weight"]
    converted["autoencoder"]["decoder.up2_res3.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.1.block.2.conv2.bias"]
    # Decoder.up_conv3
    converted["autoencoder"]["decoder.up_conv3.weight"] = pretrained_model["first_stage_model.decoder.up.1.upsample.conv.weight"]
    converted["autoencoder"]["decoder.up_conv3.bias"] = pretrained_model["first_stage_model.decoder.up.1.upsample.conv.bias"]
    # Decoder.up3_res1
    converted["autoencoder"]["decoder.up3_res1.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.0.norm1.weight"]
    converted["autoencoder"]["decoder.up3_res1.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.0.norm1.bias"]
    converted["autoencoder"]["decoder.up3_res1.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.0.conv1.weight"]
    converted["autoencoder"]["decoder.up3_res1.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.0.conv1.bias"]
    converted["autoencoder"]["decoder.up3_res1.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.0.norm2.weight"]
    converted["autoencoder"]["decoder.up3_res1.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.0.norm2.bias"]
    converted["autoencoder"]["decoder.up3_res1.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.0.conv2.weight"]
    converted["autoencoder"]["decoder.up3_res1.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.0.conv2.bias"]
    # up3_res1.residual_path
    converted["autoencoder"]["decoder.up3_res1.residual_path.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.0.nin_shortcut.weight"]
    converted["autoencoder"]["decoder.up3_res1.residual_path.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.0.nin_shortcut.bias"]
    # Decoder.up3_res2
    converted["autoencoder"]["decoder.up3_res2.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.1.norm1.weight"]
    converted["autoencoder"]["decoder.up3_res2.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.1.norm1.bias"]
    converted["autoencoder"]["decoder.up3_res2.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.1.conv1.weight"]
    converted["autoencoder"]["decoder.up3_res2.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.1.conv1.bias"]
    converted["autoencoder"]["decoder.up3_res2.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.1.norm2.weight"]
    converted["autoencoder"]["decoder.up3_res2.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.1.norm2.bias"]
    converted["autoencoder"]["decoder.up3_res2.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.1.conv2.weight"]
    converted["autoencoder"]["decoder.up3_res2.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.1.conv2.bias"]
    # Decoder.up3_res3
    converted["autoencoder"]["decoder.up3_res3.normalize_group_1.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.2.norm1.weight"]
    converted["autoencoder"]["decoder.up3_res3.normalize_group_1.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.2.norm1.bias"]
    converted["autoencoder"]["decoder.up3_res3.conv_1.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.2.conv1.weight"]
    converted["autoencoder"]["decoder.up3_res3.conv_1.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.2.conv1.bias"]
    converted["autoencoder"]["decoder.up3_res3.normalize_group_2.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.2.norm2.weight"]
    converted["autoencoder"]["decoder.up3_res3.normalize_group_2.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.2.norm2.bias"]
    converted["autoencoder"]["decoder.up3_res3.conv_2.weight"] = pretrained_model["first_stage_model.decoder.up.0.block.2.conv2.weight"]
    converted["autoencoder"]["decoder.up3_res3.conv_2.bias"] = pretrained_model["first_stage_model.decoder.up.0.block.2.conv2.bias"]
    # Decoder.normalize
    converted["autoencoder"]["decoder.normalize.weight"] = pretrained_model["first_stage_model.decoder.norm_out.weight"]
    converted["autoencoder"]["decoder.normalize.bias"] = pretrained_model["first_stage_model.decoder.norm_out.bias"]
    # Decoder.conv_final
    converted["autoencoder"]["decoder.conv_final.weight"] = pretrained_model["first_stage_model.decoder.conv_out.weight"]
    converted["autoencoder"]["decoder.conv_final.bias"] = pretrained_model["first_stage_model.decoder.conv_out.bias"]
    # END OF VAE_Decoder
    # END OF VAE

    # START OF CLIP
    # CLIPEmbedding
    converted["conditioner"]["embeddings.token_embeddings.weight"] = pretrained_model["cond_stage_model.transformer.text_model.embeddings.token_embedding.weight"]
    converted["conditioner"]["embeddings.positional_embeddings"] = pretrained_model["cond_stage_model.transformer.text_model.embeddings.position_embedding.weight"]
    # START OF CLIPLayers
    # tokenizer_layers.0
    converted["conditioner"]["tokenizer_layers.0.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.0.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.0.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.0.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.0.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.0.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.0.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.0.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.0.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.0.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.0.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.0.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.bias"]
    # tokenizer_layers.1
    converted["conditioner"]["tokenizer_layers.1.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.1.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.1.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.1.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.1.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.1.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.1.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.1.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.1.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.1.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.1.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.1.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.bias"]
    # tokenizer_layers.2
    converted["conditioner"]["tokenizer_layers.2.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.2.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.2.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.2.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.2.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.2.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.2.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.2.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.2.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.2.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.2.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.2.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.bias"]
    # tokenizer_layers.3
    converted["conditioner"]["tokenizer_layers.3.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.3.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.3.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.3.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.3.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.3.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.3.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.3.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.3.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.3.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.3.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.3.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.bias"]
    # tokenizer_layers.4
    converted["conditioner"]["tokenizer_layers.4.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.4.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.4.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.4.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.4.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.4.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.4.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.4.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.4.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.4.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.4.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.4.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.bias"]
    # tokenizer_layers.5
    converted["conditioner"]["tokenizer_layers.5.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.5.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.5.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.5.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.5.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.5.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.5.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.5.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.5.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.5.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.5.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.5.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.bias"]
    # tokenizer_layers.6
    converted["conditioner"]["tokenizer_layers.6.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.6.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.6.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.6.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.6.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.6.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.6.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.6.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.6.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.6.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.6.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.6.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.bias"]
    # tokenizer_layers.7
    converted["conditioner"]["tokenizer_layers.7.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.7.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.7.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.7.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.7.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.7.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.7.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.7.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.7.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.7.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.7.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.7.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.bias"]
    # tokenizer_layers.8
    converted["conditioner"]["tokenizer_layers.8.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.8.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.8.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.8.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.8.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.8.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.8.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.8.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.8.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.8.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.8.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.8.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.bias"]
    # tokenizer_layers.9
    converted["conditioner"]["tokenizer_layers.9.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.9.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.9.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.9.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.9.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.9.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.9.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.9.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.9.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.9.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.9.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.9.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.bias"]
    # tokenizer_layers.10
    converted["conditioner"]["tokenizer_layers.10.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.10.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.10.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.10.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.10.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.10.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.10.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.10.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.10.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.10.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.10.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.10.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.bias"]
    # tokenizer_layers.11
    converted["conditioner"]["tokenizer_layers.11.attn.proj_in.weight"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.weight"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.weight"]), 0)
    converted["conditioner"]["tokenizer_layers.11.attn.proj_in.bias"] = torch.cat((pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.bias"], pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.bias"]), 0)
    converted["conditioner"]["tokenizer_layers.11.attn.proj_out.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.weight"]
    converted["conditioner"]["tokenizer_layers.11.attn.proj_out.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.bias"]
    converted["conditioner"]["tokenizer_layers.11.normalize_layer_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.weight"]
    converted["conditioner"]["tokenizer_layers.11.normalize_layer_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.bias"]
    converted["conditioner"]["tokenizer_layers.11.normalize_layer_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.weight"]
    converted["conditioner"]["tokenizer_layers.11.normalize_layer_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.bias"]
    converted["conditioner"]["tokenizer_layers.11.linear_1.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.weight"]
    converted["conditioner"]["tokenizer_layers.11.linear_1.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.bias"]
    converted["conditioner"]["tokenizer_layers.11.linear_2.weight"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.weight"]
    converted["conditioner"]["tokenizer_layers.11.linear_2.bias"] = pretrained_model["cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.bias"]
    # END OF CLIPLayers
    # CLIP.normalize_layer
    converted["conditioner"]["normalize_layer.weight"] = pretrained_model["cond_stage_model.transformer.text_model.final_layer_norm.weight"]
    converted["conditioner"]["normalize_layer.bias"] = pretrained_model["cond_stage_model.transformer.text_model.final_layer_norm.bias"]
    # END OF CLIP

    return converted